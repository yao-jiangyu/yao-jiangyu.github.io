<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>8b/10b编码详解</title>
    <link href="/title/"/>
    <url>/title/</url>
    
    <content type="html"><![CDATA[<h1 id="b10b编码简介">1、8b/10b编码简介</h1><p>8B/10B 编码是 1983 年由 IBM 公司的 Al Widmer 和 Peter Franaszek所提出的数据传输编码标准，目前已经被广泛应用到高速串行总线。8B/10B编码将待发送的 8 位数据转换成 10位代码组，其目的是保证直流平衡，以及足够密集的电平转换。</p><p>在这些高速收发器的接收端需要通过 CDR技术去恢复时钟与数据的相位关系，在这个过程中需要不断地检测数据边沿和数据中心，从而调整时钟和数据的相位，因此需要保证接收的数据不断变化，从而给CDR 提供足够多的待检测数据边沿。</p><p>另外，高速接口电路一般采用交流耦合方式进行连接，在交流耦合电路中的信号线会接电容（隔直通交）。如果传输的数据在一段时间内全是1 或全是0，那么这段时间传输的信号可以等效成直流信号，会产生直流偏移，在通过电容时，有可能解码错误。</p><p>因此，<strong>通过 8B/10B 编码，保证编码后的数据在一定时间内 0的个数与 1 的个数保持相等。</strong></p><h1 id="b10b编码原理">2、8b/10b编码原理</h1><p>8B/10B 编码的原理是将 8 位数据编码成 10 位数据，编码后的数据中 0 和 1的个数相等，以保证数据的直流平衡。</p><p>当中 8bit 的原始数据可以分为两部分：低位的 5bitEDCBA(设其十进制数值为X)，高位的 3bit HGF(设其十进制数值为Y)，则该 8bit数据可以记为 D.X.Y。比如待编码数据为 110_00011，高 3 位数据的十进制为6，低 5 位的十进制数据为 3，则 D.3.6 就表示 110_00011。</p><p>编码时，低 5bit 原数据 EDCBA 经过 5B/6B 编码成为 6bit 码 abcdei，高3bit 原数据 HGF 经 3B/4B 成为 4bit 码fghj，最后再将两部分组合起来形成一个 10bit 码abcdeifghj，如下图所示：</p><figure><img src="/img/8b10b/image.png" alt="图 1 编码示意图" /><figcaption aria-hidden="true">图 1 编码示意图</figcaption></figure><p>另外，8B/10B 编码中还用到 12个控制字符，他们可以作为传输中帧起始、帧结束、传输空闲等状态标识，与数据字符的记法类似，控制字符一般记为K.X.Y。8bit 数据有 256 种，加上 12 种控制字符，总共有 268 种。10bit数据有 1024 种，可以从 1024 种状态中选取 256 种 0 和 1个数相等的数据作为编码结果，在从剩下的数据中选取 12个作为控制字符，即常见的 K码。</p><p>8B/10B 编码中将 K28.1、K28.5 和 K28.7 作为 K码的控制字符，称为“comma”。在任意数据组合中，comma只作为控制字符出现，而在数据部分不会出现，因此可以用 comma字符指示帧的开始和结束标志，或用来修正和数据流对齐的控制字符。</p><h1 id="b10b编码表">3、8b/10b编码表</h1><p>我们首先要搞清楚三个概念：</p><ul><li><strong>编码对照表</strong>：用来对原始数据进行编码的查找表，在对原始8bit数据进行编码时，不需要进行一系列复杂的算法运算（自己推算也可），而是直接从查找表上去查找8bit 原始数据对应的 10bit 编码数据。</li><li><strong>Paireddisparity</strong>：成对差异即“1”的个数和“0”的个数相差 2个（完美平衡除外）。不论是 5B/6B编码还是 3B/4B编码，最终编码后的数据“1”和“0”的个数对比只有三种情况，第一种是“1”的个数比“0”的个数多2 个，第二种是“0”的个数比“1”的个数多 2个，第三种是“1”的个数和“0”的个数一样多。其中“1”的个数和“0”的个数一样多又称之为完美平衡，在完美平衡的状态下是不需要进行补偿的，只不过由于完美平衡的编码数量无法满足所有数据的编码需求，因此完美平衡实际是无法做到的。</li></ul><blockquote><p>5位数据总共有32种状态，编码结果有6位数据，0和1数量相等的只有000_111、001_011…、110_001、111_000等20种状态。其中000_111和111_000存在三个连续相同的状态，并没有被使用。导致编码后0和1数据相等的结果就只有18种状态，并不能满足输入5位数据的32种数据状态，3B4B编码也有同样的问题。此时设计编码的人提出，一次编码如果不能保证编码结果0和1个数相等，那么可以让连续两次编码结果的0和1相等，也能满足要求。</p></blockquote><ul><li><strong>Running disparity</strong>：运行不一致，在上文的 Paireddisparity中已经说过编码后的数据“1”的个数和“0”的个数不可能做到一直完美平衡（因为只有少数数据编码后是完美平衡，大多数数据编码后是成对差异的），要么“1”的个数比“0”多，要么反之。我们称这种“0”“1”个数差为“极性偏差”，用 RD 表示，当“1”的个数比“0”多的时候 RD的值为“+1”，反过来 RD 的值为“-1”。</li></ul><blockquote><p>如果编码结果的1和0个数相等，称为平衡编码，此时RD的数值保持不变。如果编码结果1和0个数不等，称为非平衡编码，此时RD的数值翻转，下次编码采用RD对应数值的编码作为编码结果。</p></blockquote><p><strong>将上次8B10B编码结果的RD数值用作本次5B6B编码的起始RD，而3B4B编码的起始RD等于5B6B编码结果的RD，3B4B编码结果的RD作为本次8B10B编码的RD。</strong></p><p>对应的编码状态跳转如下图所示：</p><figure><img src="/img/8b10b/image-3.png" alt="图 2 编码状态跳转示意图" /><figcaption aria-hidden="true">图 2 编码状态跳转示意图</figcaption></figure><h2 id="b6b-编码表">3.1 5B/6B 编码表</h2><figure><img src="/img/8b10b/image-1.png" alt="图 3 5B/6B 编码表" /><figcaption aria-hidden="true">图 3 5B/6B 编码表</figcaption></figure><p>5bit 的数据位宽一共对应 32 个原始数据，所以在上图的 5B/6B编码中一共拥有 0~31个原始数据，其中“EDCBA”表示原始数据，“abcdei”表示编码后的数据。表中可以看到绝大多数数据都是有两个编码对应的，在实际使用的时候根据RD 的值来选择其中一个编码使用；还有一部分数据后面是携带标记符号的，如D.23、D.27、D.29、D.30，这些带标记符号的既是原始数据又是控制编码的一部分，主要用于K.x.7。其中还有一个 K28比较特殊，这是一个独立的控制编码不与数据复用，主要用于控制编码K.28.y。</p><h2 id="b4b-编码表">3.2 3B/4B 编码表</h2><figure><img src="/img/8b10b/image-2.png" alt="图 4 3B/4B 编码表" /><figcaption aria-hidden="true">图 4 3B/4B 编码表</figcaption></figure><p>在 3B/4B 编码当中大家要注意的是数字 7 有两种编码，分别是 D.x.P7 和D.x.A7，为什么要用两种编码方式呢，主要是避免出现连续的 5个“0”或“1”，例如当 RD 为 1 时对 D(11,7) 进行编码，其中 11 编码后的数值是110100 而 7 就只能使用 D.x.A7 这种编码规则了，如果使用 D.x.P7的编码规则，最后编码数据就成了 1101000001，可以看到出现了连续的 5个“0”。因此大家在编码的时候一定要选择合适的编码规则。</p><p>在控制码的编码表中可以看到 K.x.1、 K.x.5、 K.x.7这三个控制码被特殊标记了，这三个特殊编码会和上文 5B/6B 编码中提到的 K28连用，组成 K.28.1、K.28.5 和 K.28.7三个特殊编码，这三个特殊编码是会出现连续 5个“0”或“1”的，这种特殊码又称之为“commasymbols”。它们不会出现在数据负荷部分，并且只要出现就一定是控制码，通常用它们作为帧的开始和结束标志，或者数据流对齐的控制字符。</p><p>除了K.28.1、K.28.5 和 K.28.7 这三个特殊编码外还要注意上文 5B/6B编码中提到的 D.23、D.27、D.29、D.30 这几个特殊数值，在控制码中他们只能和K.x.7 连用组成 K.23.7、K.27.7、K.29.7、K.30.7这四个特殊控制码。原因和数字 7 的两套编码规则一样，避免出现连续的 5个“0”或“1”。</p><p>完整的控制码编码表如下：</p><figure><img src="/img/8b10b/image-4.png" alt="图 5 控制码编码示意图" /><figcaption aria-hidden="true">图 5 控制码编码示意图</figcaption></figure><h1 id="b10b编码实例">4、8b/10b编码实例</h1><p>Xilinx<ahref="https://docs.amd.com/v/u/en-US/ug476_7Series_Transceivers">UG476</a>手册的附录有所有8B/10B 编码数据的结果, 以及对应的RD值。这里以手册中的数据为例，对 8B/10B编码进行实例分析。</p><ol type="1"><li>请问 D.8.3 的 8B/10B 编码结果是多少？</li></ol><p>D.8 的 5B/6B 编码结果为 111001，5B/6B 编码完成后，RD 翻转变为 1。将RD=1 作为 D.x.3 的 3B/4B 编码起始 RD，根据查表得编码结果为 0011，再次将RD 翻转，作为本次 8B/10B 编码结果的 RD。因此<strong>起始 RD=-1的编码结果为 111001_0011。</strong></p><blockquote><p>第一个原始数据在进行编码的时候是默认 RD 为“-1”。</p></blockquote><p>与正确答案一致，编码结果为 111001_0011：</p><figure><img src="/img/8b10b/image-5.png" alt="图 6 D.8.3 的 8B/10B 编码结果" /><figcaption aria-hidden="true">图 6 D.8.3 的 8B/10B编码结果</figcaption></figure><ol start="2" type="1"><li>当前 RD=1，则 K.28.5、D.2.6、D.23.4 的编码结果依次是多少，且最终的RD 是多少？</li></ol><p>首先 RD=1 时，查得 k.28 编码结果为 110000，这是不平衡编码，RD的最终结果会翻转，RD=-1；K.x.5 的3B/4B编码是 0101，这是平衡编码，因此 RD不变，等于 -1。</p><p>因此 D.2.6 的起始 RD=-1，首先 D.2 的 5B/6B 编码结果为 101101，RD翻转变为 1。D.x.6 的 3B/4B 编码结果为 0110，由于 D.x.6 是平衡编码，因此RD 保持不变，等于 1。故 D.2.6 的编码结果为 101101_0110，RD 最终为1。</p><p>最后，D.23.4 的起始 RD=1，D.23.4 的 5B6B 编码结果为 000101，RD 翻转为-1。之后 D.x.4 的编码结果为 1101，RD 的极性再次翻转为 1。</p><p>所以 K.28.5、D.2.6、D.23.4 的编码结果依次是110000_0101、101101_0110、000101_1101，RD 的最终取值为 1。D.2.6、D.23.4的手册查表结果如下图所示，与上述计算结果保持相同，证明编码规则没有问题。</p><figure><img src="/img/8b10b/image-7.png" alt="图 7 D.2.6 的 8B/10B 编码结果" /><figcaption aria-hidden="true">图 7 D.2.6 的 8B/10B编码结果</figcaption></figure><figure><img src="/img/8b10b/image-6.png"alt="图 8 D.23.4 的 8B/10B 编码结果" /><figcaption aria-hidden="true">图 8 D.23.4 的 8B/10B编码结果</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>高速收发器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字编码</tag>
      
      <tag>FPGA</tag>
      
      <tag>8b/10b</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/title/"/>
    <url>/title/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<center>繁星纵变，智慧永存！</center>]]></content>
    
  </entry>
  
  
  
</search>
